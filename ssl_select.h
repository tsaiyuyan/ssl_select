/// @file the header file to include for SSL_SELECT

#ifndef _SSL_SELECT_H
#define _SSL_SELECT_H
#include <openssl/ssl.h>
#include <openssl/err.h>

enum{ 	
	SSL_OPS_FAIL	= -1,
	SSL_OPS_SELECT = -2
};



typedef struct {
	int write;
	int read;
}wait_event;

/** the contex for SSL_select functions
* this structure is allocated by sslinfo_alloc()
* all event records should not be handled maunally, 
* but insteadby the following functions:
* - ssl_set_fds()
* - ssl_handle_fds()
*/
typedef struct {
	int sk;	/**< socket handle
	* this sould be created by socket()
	*/
	SSL *ssl; ///< SSL handle
	SSL_CTX *ctx; ///< SSL_CTX
	wait_event recv; ///< recv event record
	wait_event send; ///< send event record
	wait_event connect; ///< connect event record
	wait_event accept; ///< accept event record
}ssl_info;


#define SSL_SEL_PASSWORD_MAX	512

/** structure object for storing the private CA password
* this structure used as a input for initalize_ctx()
*/
typedef struct{
	int len; ///< length of the password
	char data[SSL_SEL_PASSWORD_MAX]; ///< password string
}ssl_pwd_data;

ssl_info * sslinfo_alloc(void);

void init_ssl_lib(void);
SSL_CTX *initialize_ctx(char *rootCA, char * keyfile, char * password, ssl_pwd_data * buff);
void destroy_ctx(SSL_CTX *ctx);

int __set_block(int sock);
int __set_nonblock(int sock);
/** ssl_connect nonblocking called directly
* \param[in] info the ssl_info,
* \param[out] ssl_errno the error number
* \return
* - >= 0 the succss value returned by ssl_connect()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_connect_direct(ssl_info * info, int *ssl_errno);
/** ssl_write() nonblocking called directly 
* \param[in] info the ssl_info,
* \param[out] buf the send data
* \param[in] len the data length
* \param[out] ssl_errno the error number
* \return
* - >= 0 the succss value returned by ssl_write()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_send_direct(ssl_info * info, void *buf, int len, int *ssl_errno);
/** ssl_trsf() nonblocking called directly
* \param[in] info the ssl_info,
* \param[out] buf the data buffer
* \param[in] len the buffer length
* \param[out] ssl_errno the error number
* \return
* - >= 0 the succss value returned by ssl_accept()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_recv_direct(ssl_info * info, void * buf, int len, int *ssl_errno);
/** ssl_accept() nonblocking called directly.  
* \param[in] info the ssl_info,
* \param[out] ssl_errno the error number
* \return
* - >= 0 the succss value returned by ssl_accept()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_accept_direct(ssl_info * info, int *ssl_errno);

/** ssl_connect() with timeout given with an intiger as miliseconds 
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE().  
* \param[in] info the ssl_info.
* \param[in] to_ms timeout in miliseconds.
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_connect()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_connect_simple(ssl_info * info, int to_ms, int *ssl_errno);
/** ssl_accept() with timeout given with an intiger as miliseconds 
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()  
* \param[in] info the ssl_info.
* \param[in] to_ms timeout in miliseconds.
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_connect()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_accept_simple(ssl_info * info, int to_ms, int *ssl_errno);
/** ssl_write() with timeout given with an intiger as miliseconds 
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] to_ms timeout in miliseconds.
* \param[in] buf data to send
* \param[in] len data length
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_write()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_send_simple(ssl_info * info, void * buf, int len, int to_ms, int *ssl_errno);
/** ssl_read() with timeout given with an intiger as miliseconds 
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] to_ms timeout in miliseconds.
* \param[in] buf data to send
* \param[in] len data length
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_read()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_recv_simple(ssl_info * info, void * buf, int len, int to_ms, int *ssl_errno);
/** ssl_connect() with timeout given with an timeval
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] tv timeout.
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_write()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_connect_simple_tv(ssl_info * info, struct timeval * tv, int *ssl_errno);
/** ssl_accept() with timeout given with timeval 
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] tv timeout in miliseconds.
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_connect()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_accept_simple_tv(ssl_info * info, struct timeval * tv, int *ssl_errno);
/** ssl_write() with timeout given with an timeval
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] tv timeout.
* \param[in] buf data to send
* \param[in] len data length
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_read()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_send_simple_tv(ssl_info * info, void * buf, int len, struct timeval * tv, int *ssl_errno);
/** ssl_read() with timeout given with an timeval
* a simple blocking SSL_accept() function with a timeout.
* generated by GEN_SSL_ACTION_SIMPLE()
* \param[in] info the ssl_info.
* \param[in] tv timeout.
* \param[in] buf data buffer
* \param[in] len buffer length
* \param[out] ssl_errno the ssl_errno, that can be used by ssl_errno_str().
* \return 
* - >= 0 the succss value returned by ssl_read()
* - SSL_OPS_FAIL action failed, get error message with ssl_errno_str().
* - SSL_OPS_SELECT actoin pending, use ssl_set_fds() to setup the fd_sets before select().
*/
int ssl_recv_simple_tv(ssl_info * info, void * buf, int len, struct timeval * tv, int *ssl_errno);
int ssl_set_fds(ssl_info *info, int maxfd, fd_set *rfds, fd_set *wfds);
int ssl_errno_str(ssl_info * info, int ssl_errno, char * buf, int buflen);

#define invoke_ssl_send	(1 << 0)
#define invoke_ssl_recv	(1 << 1)
#define invoke_ssl_connect (1 << 2)
#define invoke_ssl_accept (1 << 3)
int ssl_handle_fds(ssl_info * info, fd_set *rfds, fd_set *wfds);

#endif
